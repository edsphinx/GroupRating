{
  "address": "0xb9e847f664227f883bcE636268D286D38803ec15",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_schemaID",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEAS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyTeamMember",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TeamNotExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "rateAmount",
          "type": "uint8"
        }
      ],
      "name": "assignRate",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_whitelist",
          "type": "address[]"
        }
      ],
      "name": "createTeam",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "teamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalGrant",
          "type": "uint256"
        }
      ],
      "name": "distributeGrant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTeamsByAddress",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTeams",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "schemaID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x02b2051fae3f7267a194fd64595e14aec9320ff8e125eb907d0eb8d91cb75bbc",
  "receipt": {
    "to": null,
    "from": "0xf5Ac0b87325Bf1B3Eee525EB9646faFD69D2FedC",
    "contractAddress": "0xb9e847f664227f883bcE636268D286D38803ec15",
    "transactionIndex": 0,
    "gasUsed": "1003973",
    "logsBloom": "0x
    "blockHash": "0xbf626ff3c907129c08ba5f1c50a4a1f5c09d5e53bd312311cf233f6aa081eee1",
    "transactionHash": "0x02b2051fae3f7267a194fd64595e14aec9320ff8e125eb907d0eb8d91cb75bbc",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5940233,
        "transactionHash": "0x02b2051fae3f7267a194fd64595e14aec9320ff8e125eb907d0eb8d91cb75bbc",
        "address": "0xb9e847f664227f883bcE636268D286D38803ec15",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5ac0b87325bf1b3eee525eb9646fafd69d2fedc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbf626ff3c907129c08ba5f1c50a4a1f5c09d5e53bd312311cf233f6aa081eee1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5940233,
        "transactionHash": "0x02b2051fae3f7267a194fd64595e14aec9320ff8e125eb907d0eb8d91cb75bbc",
        "address": "0xb9e847f664227f883bcE636268D286D38803ec15",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f5ac0b87325bf1b3eee525eb9646fafd69d2fedc",
          "0x000000000000000000000000f5ac0b87325bf1b3eee525eb9646fafd69d2fedc"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xbf626ff3c907129c08ba5f1c50a4a1f5c09d5e53bd312311cf233f6aa081eee1"
      }
    ],
    "blockNumber": 5940233,
    "cumulativeGasUsed": "1003973",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf5Ac0b87325Bf1B3Eee525EB9646faFD69D2FedC",
    "0x53a2b8d5fcfee24fa5e92ce4dfebbea22ad32dfa1d4d6945c59a9365228646fd"
  ],
  "numDeployments": 4,
  "solcInputHash": "da344e8a51b49d17eae28235149ea640",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_schemaID\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEAS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyTeamMember\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TeamNotExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"rateAmount\",\"type\":\"uint8\"}],\"name\":\"assignRate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"}],\"name\":\"createTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalGrant\",\"type\":\"uint256\"}],\"name\":\"distributeGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTeamsByAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTeams\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schemaID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GroupRating.sol\":\"GroupRating\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS is ISemver {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x242e0203b314c8539fd4ad3c1f0b7a9c1178fe55b223f4bc007eb9cbf271854c\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry is ISemver {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"},\"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"../ISemver.sol\\\";\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver is ISemver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x479f39f03425df5385d790cd2c7447b8250aeb9733d13029d3da8c5982b6604b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/GroupRating.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.23;\\n\\nimport { IEAS, AttestationRequest, AttestationRequestData } from \\\"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol\\\";\\nimport { NO_EXPIRATION_TIME, EMPTY_UID, Attestation } from \\\"@ethereum-attestation-service/eas-contracts/contracts/Common.sol\\\";\\nimport { ISchemaRegistry, SchemaRecord } from \\\"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract GroupRating is Ownable {\\n    error InvalidEAS();\\n    error NotWhitelisted();\\n    error AlreadyWhitelisted();\\n    error NotEnoughBalance();\\n    error TeamNotExists();\\n    error OnlyTeamMember();\\n\\n    struct Team {\\n        mapping(address => bool) members;\\n        address[] memberList;\\n    }\\n\\n    mapping(uint256 => Team) private teams;\\n    uint256[] private teamIds;\\n    uint256 private teamCounter;\\n\\n    mapping(address => uint256[]) private addressToTeams;\\n    mapping(address => mapping(uint256 => uint)) public userCounter;\\n\\n    IEAS private _eas = IEAS(0xaEF4103A04090071165F78D45D83A0C0782c2B2a);\\n    ISchemaRegistry private _schemaregistry = ISchemaRegistry(0x55D26f9ae0203EF95494AE4C170eD35f4Cf77797);\\n    bytes32 public schemaID;\\n\\n    constructor(address _owner, bytes32 _schemaID) {\\n        transferOwnership(_owner); // Set the owner using Ownable's transferOwnership function\\n        schemaID = _schemaID;\\n    }\\n\\n    modifier onlyTeamMember(uint256 teamId) {\\n        if (!teams[teamId].members[msg.sender]) {\\n            revert OnlyTeamMember();\\n        }\\n        _;\\n    }\\n\\n    function createTeam(address[] memory _whitelist) external onlyOwner returns (uint256) {\\n        teamCounter++;\\n        uint256 newTeamId = teamCounter;\\n        teamIds.push(newTeamId); // Add new team ID to the list\\n        for (uint i = 0; i < _whitelist.length; i++) {\\n            address member = _whitelist[i];\\n            teams[newTeamId].members[member] = true;\\n            teams[newTeamId].memberList.push(member);\\n            addressToTeams[member].push(newTeamId);\\n        }\\n        return newTeamId; // Return the new team ID\\n    }\\n\\n    function addMember(uint256 teamId, address _address) external onlyOwner {\\n        if (!teams[teamId].members[_address]) {\\n            teams[teamId].members[_address] = true;\\n            teams[teamId].memberList.push(_address);\\n            addressToTeams[_address].push(teamId);\\n        } else {\\n            revert AlreadyWhitelisted();\\n        }\\n    }\\n\\n    function getTeamsByAddress(address _address) external view returns (uint256[] memory) {\\n        return addressToTeams[_address];\\n    }\\n\\n    function getTotalTeams() external view returns (uint256[] memory) {\\n        return teamIds;\\n    }\\n\\n    function assignRate(uint256 teamId, address _recipient, uint8 rateAmount) external returns (bytes32) {\\n        require(teams[teamId].members[_recipient], \\\"Recipient must be a team member\\\");\\n\\n        userCounter[_recipient][teamId] += rateAmount;\\n\\n        bytes memory _data = abi.encode(teamId, _recipient, userCounter[_recipient][teamId]);\\n        \\n        try _eas.attest(\\n            AttestationRequest({\\n                schema: schemaID,\\n                data: AttestationRequestData({\\n                    recipient: _recipient,\\n                    expirationTime: NO_EXPIRATION_TIME, // No expiration time\\n                    revocable: true,\\n                    refUID: EMPTY_UID, // No references UI\\n                    data: _data,\\n                    value: 0 // No value/ETH\\n                })\\n            })\\n        ) returns (bytes32 attestationId) {\\n            return attestationId;\\n        } catch Error(string memory reason) {\\n            revert(reason);\\n        } catch (bytes memory) {\\n            revert(\\\"Attestation failed unexpectedly\\\");\\n        }\\n    }\\n\\n    function distributeGrant(uint256 teamId, uint256 totalGrant) external onlyOwner {\\n        require(teamId <= teamCounter, \\\"Team does not exist\\\");\\n\\n        uint256 totalPoints = 0;\\n        address[] memory members = teams[teamId].memberList;\\n\\n        for (uint i = 0; i < members.length; i++) {\\n            totalPoints += userCounter[members[i]][teamId];\\n        }\\n\\n        require(totalPoints > 0, \\\"No points to distribute\\\");\\n\\n        for (uint i = 0; i < members.length; i++) {\\n            address member = members[i];\\n            uint256 memberShare = (userCounter[member][teamId] * totalGrant) / totalPoints;\\n            (bool success, ) = member.call{value: memberShare}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x8e72ccf1b14c087b7b04af9d4eea5c7299d362746e37f4d409df38a83bbc0282\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600680546001600160a01b031990811673aef4103a04090071165f78d45d83a0c0782c2b2a17909155600780549091167355d26f9ae0203ef95494ae4c170ed35f4cf777971790553480156200005957600080fd5b5060405162001178380380620011788339810160408190526200007c91620001cd565b62000087336200009c565b6200009282620000ec565b6008555062000209565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000f66200016f565b6001600160a01b038116620001615760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6200016c816200009c565b50565b6000546001600160a01b03163314620001cb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000158565b565b60008060408385031215620001e157600080fd5b82516001600160a01b0381168114620001f957600080fd5b6020939093015192949293505050565b610f5f80620002196000396000f3fe6080604052600436106100a05760003560e01c80638c20cad0116100645780638c20cad01461017b5780638da5cb5b14610190578063ba2b7f21146101b8578063f2fde38b146101d8578063fd1308a6146101f8578063fd6d90da1461020e57600080fd5b80630c44ab46146100ac5780632fee1aa9146100df5780636b13a2ad14610117578063715018a61461014457806374d0a6761461015b57600080fd5b366100a757005b600080fd5b3480156100b857600080fd5b506100cc6100c7366004610ae9565b61022e565b6040519081526020015b60405180910390f35b3480156100eb57600080fd5b506100cc6100fa366004610b2f565b600560209081526000928352604080842090915290825290205481565b34801561012357600080fd5b50610137610132366004610b59565b610497565b6040516100d69190610b74565b34801561015057600080fd5b50610159610503565b005b34801561016757600080fd5b50610159610176366004610bb8565b610517565b34801561018757600080fd5b506101376105cd565b34801561019c57600080fd5b506000546040516001600160a01b0390911681526020016100d6565b3480156101c457600080fd5b506101596101d3366004610be4565b610625565b3480156101e457600080fd5b506101596101f3366004610b59565b6108b0565b34801561020457600080fd5b506100cc60085481565b34801561021a57600080fd5b506100cc610229366004610c49565b610929565b60008381526001602090815260408083206001600160a01b038616845290915281205460ff166102a55760405162461bcd60e51b815260206004820152601f60248201527f526563697069656e74206d7573742062652061207465616d206d656d6265720060448201526064015b60405180910390fd5b6001600160a01b03831660009081526005602090815260408083208784529091528120805460ff851692906102db908490610d0d565b90915550506001600160a01b03838116600081815260056020908152604080832089845282528083205481518084018b905280830186905260608082019290925282518082038301815260065460c0808401865260085460808086019182528751928301885299825296810188905260018187015293840187905296830181905260a0808401969096529401525163f17325e760e01b81529193929092169163f17325e79161038d9190600401610d6c565b6020604051808303816000875af19250505080156103c8575060408051601f3d908101601f191682019092526103c591810190610def565b60015b610487576103d4610e08565b806308c379a00361040d57506103e8610e24565b806103f3575061040f565b8060405162461bcd60e51b815260040161029c9190610eae565b505b3d808015610439576040519150601f19603f3d011682016040523d82523d6000602084013e61043e565b606091505b5060405162461bcd60e51b815260206004820152601f60248201527f4174746573746174696f6e206661696c656420756e65787065637465646c7900604482015260640161029c565b91506104909050565b9392505050565b6001600160a01b0381166000908152600460209081526040918290208054835181840281018401909452808452606093928301828280156104f757602002820191906000526020600020905b8154815260200190600101908083116104e3575b50505050509050919050565b61050b610a28565b6105156000610a82565b565b61051f610a28565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166105b45760008281526001602081815260408084206001600160a01b038616808652818452828620805460ff191686179055908401805480860182559086528386200180546001600160a01b031916821790558452600482528320805492830181558352909120018290555050565b60405163b73e95e160e01b815260040160405180910390fd5b6060600280548060200260200160405190810160405280929190818152602001828054801561061b57602002820191906000526020600020905b815481526020019060010190808311610607575b5050505050905090565b61062d610a28565b6003548211156106755760405162461bcd60e51b81526020600482015260136024820152721519585b48191bd95cc81b9bdd08195e1a5cdd606a1b604482015260640161029c565b600082815260016020818152604080842090920180548351818402810184019094528084528493928301828280156106d657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106b8575b5050505050905060005b815181101561074e57600560008383815181106106ff576106ff610ec1565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600086815260200190815260200160002054836107449190610d0d565b92506001016106e0565b506000821161079f5760405162461bcd60e51b815260206004820152601760248201527f4e6f20706f696e747320746f2064697374726962757465000000000000000000604482015260640161029c565b60005b81518110156108a95760008282815181106107bf576107bf610ec1565b6020908102919091018101516001600160a01b03811660009081526005835260408082208a83529093529182205490925085906107fd908890610ed7565b6108079190610eee565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610856576040519150601f19603f3d011682016040523d82523d6000602084013e61085b565b606091505b505090508061089e5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161029c565b5050506001016107a2565b5050505050565b6108b8610a28565b6001600160a01b03811661091d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161029c565b61092681610a82565b50565b6000610933610a28565b6003805490600061094383610f10565b90915550506003546002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018290555b8351811015610a1f57600084828151811061099d5761099d610ec1565b6020908102919091018101516000858152600180845260408083206001600160a01b03909416808452848652818420805460ff191684179055938201805480840182559084528584200180546001600160a01b031916851790559282526004845291812080548084018255908252929020909101849055919091019050610980565b5090505b919050565b6000546001600160a01b031633146105155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610a2357600080fd5b600080600060608486031215610afe57600080fd5b83359250610b0e60208501610ad2565b9150604084013560ff81168114610b2457600080fd5b809150509250925092565b60008060408385031215610b4257600080fd5b610b4b83610ad2565b946020939093013593505050565b600060208284031215610b6b57600080fd5b61049082610ad2565b6020808252825182820181905260009190848201906040850190845b81811015610bac57835183529284019291840191600101610b90565b50909695505050505050565b60008060408385031215610bcb57600080fd5b82359150610bdb60208401610ad2565b90509250929050565b60008060408385031215610bf757600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610c4257610c42610c06565b6040525050565b60006020808385031215610c5c57600080fd5b823567ffffffffffffffff80821115610c7457600080fd5b818501915085601f830112610c8857600080fd5b813581811115610c9a57610c9a610c06565b8060051b9150604051610caf85840182610c1c565b81815291830184019184810188841115610cc857600080fd5b938501935b83851015610ceb57610cde85610ad2565b8152938501938501610ccd565b50979650505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610d2057610d20610cf7565b92915050565b6000815180845260005b81811015610d4c57602081850181015186830182015201610d30565b506000602082860101526020601f19601f83011685010191505092915050565b60208152815160208201526000602083015160408084015260018060a01b03815116606084015267ffffffffffffffff60208201511660808401526040810151151560a0840152606081015160c0840152608081015160c060e0850152610dd7610120850182610d26565b905060a0820151610100850152809250505092915050565b600060208284031215610e0157600080fd5b5051919050565b600060033d1115610e215760046000803e5060005160e01c5b90565b600060443d1015610e325790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715610e6257505050505090565b8285019150815181811115610e7a5750505050505090565b843d8701016020828501011115610e945750505050505090565b610ea360208286010187610c1c565b509095945050505050565b6020815260006104906020830184610d26565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417610d2057610d20610cf7565b600082610f0b57634e487b7160e01b600052601260045260246000fd5b500490565b600060018201610f2257610f22610cf7565b506001019056fea2646970667358221220d2b8cdfeb6ef0d7dce9b1271c4a1d7b0591d094dd83544dd691aea898f608d2564736f6c63430008170033",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c80638c20cad0116100645780638c20cad01461017b5780638da5cb5b14610190578063ba2b7f21146101b8578063f2fde38b146101d8578063fd1308a6146101f8578063fd6d90da1461020e57600080fd5b80630c44ab46146100ac5780632fee1aa9146100df5780636b13a2ad14610117578063715018a61461014457806374d0a6761461015b57600080fd5b366100a757005b600080fd5b3480156100b857600080fd5b506100cc6100c7366004610ae9565b61022e565b6040519081526020015b60405180910390f35b3480156100eb57600080fd5b506100cc6100fa366004610b2f565b600560209081526000928352604080842090915290825290205481565b34801561012357600080fd5b50610137610132366004610b59565b610497565b6040516100d69190610b74565b34801561015057600080fd5b50610159610503565b005b34801561016757600080fd5b50610159610176366004610bb8565b610517565b34801561018757600080fd5b506101376105cd565b34801561019c57600080fd5b506000546040516001600160a01b0390911681526020016100d6565b3480156101c457600080fd5b506101596101d3366004610be4565b610625565b3480156101e457600080fd5b506101596101f3366004610b59565b6108b0565b34801561020457600080fd5b506100cc60085481565b34801561021a57600080fd5b506100cc610229366004610c49565b610929565b60008381526001602090815260408083206001600160a01b038616845290915281205460ff166102a55760405162461bcd60e51b815260206004820152601f60248201527f526563697069656e74206d7573742062652061207465616d206d656d6265720060448201526064015b60405180910390fd5b6001600160a01b03831660009081526005602090815260408083208784529091528120805460ff851692906102db908490610d0d565b90915550506001600160a01b03838116600081815260056020908152604080832089845282528083205481518084018b905280830186905260608082019290925282518082038301815260065460c0808401865260085460808086019182528751928301885299825296810188905260018187015293840187905296830181905260a0808401969096529401525163f17325e760e01b81529193929092169163f17325e79161038d9190600401610d6c565b6020604051808303816000875af19250505080156103c8575060408051601f3d908101601f191682019092526103c591810190610def565b60015b610487576103d4610e08565b806308c379a00361040d57506103e8610e24565b806103f3575061040f565b8060405162461bcd60e51b815260040161029c9190610eae565b505b3d808015610439576040519150601f19603f3d011682016040523d82523d6000602084013e61043e565b606091505b5060405162461bcd60e51b815260206004820152601f60248201527f4174746573746174696f6e206661696c656420756e65787065637465646c7900604482015260640161029c565b91506104909050565b9392505050565b6001600160a01b0381166000908152600460209081526040918290208054835181840281018401909452808452606093928301828280156104f757602002820191906000526020600020905b8154815260200190600101908083116104e3575b50505050509050919050565b61050b610a28565b6105156000610a82565b565b61051f610a28565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff166105b45760008281526001602081815260408084206001600160a01b038616808652818452828620805460ff191686179055908401805480860182559086528386200180546001600160a01b031916821790558452600482528320805492830181558352909120018290555050565b60405163b73e95e160e01b815260040160405180910390fd5b6060600280548060200260200160405190810160405280929190818152602001828054801561061b57602002820191906000526020600020905b815481526020019060010190808311610607575b5050505050905090565b61062d610a28565b6003548211156106755760405162461bcd60e51b81526020600482015260136024820152721519585b48191bd95cc81b9bdd08195e1a5cdd606a1b604482015260640161029c565b600082815260016020818152604080842090920180548351818402810184019094528084528493928301828280156106d657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106b8575b5050505050905060005b815181101561074e57600560008383815181106106ff576106ff610ec1565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600086815260200190815260200160002054836107449190610d0d565b92506001016106e0565b506000821161079f5760405162461bcd60e51b815260206004820152601760248201527f4e6f20706f696e747320746f2064697374726962757465000000000000000000604482015260640161029c565b60005b81518110156108a95760008282815181106107bf576107bf610ec1565b6020908102919091018101516001600160a01b03811660009081526005835260408082208a83529093529182205490925085906107fd908890610ed7565b6108079190610eee565b90506000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610856576040519150601f19603f3d011682016040523d82523d6000602084013e61085b565b606091505b505090508061089e5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b604482015260640161029c565b5050506001016107a2565b5050505050565b6108b8610a28565b6001600160a01b03811661091d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161029c565b61092681610a82565b50565b6000610933610a28565b6003805490600061094383610f10565b90915550506003546002805460018101825560009182527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018290555b8351811015610a1f57600084828151811061099d5761099d610ec1565b6020908102919091018101516000858152600180845260408083206001600160a01b03909416808452848652818420805460ff191684179055938201805480840182559084528584200180546001600160a01b031916851790559282526004845291812080548084018255908252929020909101849055919091019050610980565b5090505b919050565b6000546001600160a01b031633146105155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161029c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610a2357600080fd5b600080600060608486031215610afe57600080fd5b83359250610b0e60208501610ad2565b9150604084013560ff81168114610b2457600080fd5b809150509250925092565b60008060408385031215610b4257600080fd5b610b4b83610ad2565b946020939093013593505050565b600060208284031215610b6b57600080fd5b61049082610ad2565b6020808252825182820181905260009190848201906040850190845b81811015610bac57835183529284019291840191600101610b90565b50909695505050505050565b60008060408385031215610bcb57600080fd5b82359150610bdb60208401610ad2565b90509250929050565b60008060408385031215610bf757600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610c4257610c42610c06565b6040525050565b60006020808385031215610c5c57600080fd5b823567ffffffffffffffff80821115610c7457600080fd5b818501915085601f830112610c8857600080fd5b813581811115610c9a57610c9a610c06565b8060051b9150604051610caf85840182610c1c565b81815291830184019184810188841115610cc857600080fd5b938501935b83851015610ceb57610cde85610ad2565b8152938501938501610ccd565b50979650505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610d2057610d20610cf7565b92915050565b6000815180845260005b81811015610d4c57602081850181015186830182015201610d30565b506000602082860101526020601f19601f83011685010191505092915050565b60208152815160208201526000602083015160408084015260018060a01b03815116606084015267ffffffffffffffff60208201511660808401526040810151151560a0840152606081015160c0840152608081015160c060e0850152610dd7610120850182610d26565b905060a0820151610100850152809250505092915050565b600060208284031215610e0157600080fd5b5051919050565b600060033d1115610e215760046000803e5060005160e01c5b90565b600060443d1015610e325790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715610e6257505050505090565b8285019150815181811115610e7a5750505050505090565b843d8701016020828501011115610e945750505050505090565b610ea360208286010187610c1c565b509095945050505050565b6020815260006104906020830184610d26565b634e487b7160e01b600052603260045260246000fd5b8082028115828204841417610d2057610d20610cf7565b600082610f0b57634e487b7160e01b600052601260045260246000fd5b500490565b600060018201610f2257610f22610cf7565b506001019056fea2646970667358221220d2b8cdfeb6ef0d7dce9b1271c4a1d7b0591d094dd83544dd691aea898f608d2564736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 503,
        "contract": "contracts/GroupRating.sol:GroupRating",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 672,
        "contract": "contracts/GroupRating.sol:GroupRating",
        "label": "teams",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Team)667_storage)"
      },
      {
        "astId": 675,
        "contract": "contracts/GroupRating.sol:GroupRating",
        "label": "teamIds",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 677,
        "contract": "contracts/GroupRating.sol:GroupRating",
        "label": "teamCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 682,
        "contract": "contracts/GroupRating.sol:GroupRating",
        "label": "addressToTeams",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 688,
        "contract": "contracts/GroupRating.sol:GroupRating",
        "label": "userCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 694,
        "contract": "contracts/GroupRating.sol:GroupRating",
        "label": "_eas",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IEAS)372"
      },
      {
        "astId": 700,
        "contract": "contracts/GroupRating.sol:GroupRating",
        "label": "_schemaregistry",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ISchemaRegistry)425"
      },
      {
        "astId": 702,
        "contract": "contracts/GroupRating.sol:GroupRating",
        "label": "schemaID",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IEAS)372": {
        "encoding": "inplace",
        "label": "contract IEAS",
        "numberOfBytes": "20"
      },
      "t_contract(ISchemaRegistry)425": {
        "encoding": "inplace",
        "label": "contract ISchemaRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Team)667_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GroupRating.Team)",
        "numberOfBytes": "32",
        "value": "t_struct(Team)667_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Team)667_storage": {
        "encoding": "inplace",
        "label": "struct GroupRating.Team",
        "members": [
          {
            "astId": 663,
            "contract": "contracts/GroupRating.sol:GroupRating",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 666,
            "contract": "contracts/GroupRating.sol:GroupRating",
            "label": "memberList",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}